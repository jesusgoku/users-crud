#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Usuarios:server');
var http = require('http');
var models = require('../models');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket.io
 */
var io = require('socket.io')(server);
require('../sockets')(io);

/**
 * Sequelize
 */

models.sequelize.sync({ force: true }).then(function () {
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  var socialNetworks = [
    { name: 'Twitter' },
    { name: 'Facebook' },
    { name: 'LinkedIn' },
    { name: 'GooglePlus' }
  ];

  socialNetworks.forEach(function (socialNetwork) {
    models.SocialNetwork.create(socialNetwork);
  });

  models.User.create({
      firstName: 'Cesar',
      lastName: 'Sepulveda',
      email: 'csepulveda@mediastre.am',
      birthDay: '1980-01-01',
      password: 'mediastream'
  }).then(function(user) {
    models.SocialNetwork.findById(1).then(function (socialNetwork) {
      models.UserSocialNetwork.create({
        socialUsername: 'csepulvedab',
        socialId: '12346578931'
      }).then(function (userSocialNetwork) {
        userSocialNetwork.setSocialNetwork(socialNetwork);
        user.addUserSocialNetwork(userSocialNetwork);
      });
    });
  });



  var userProfilePhotosPath = path.join(__dirname, '../uploads/user-profile-photos');
  fs.readdirSync(userProfilePhotosPath)
    .forEach(function (fileName) {
      if ('.gitkeep' !== fileName) {
        fs.unlinkSync(path.join(userProfilePhotosPath, fileName));
      }
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
